Perfeito! Vamos estruturar esse frontend de forma modular e organizada, seguindo a arquitetura em camadas que voc√™ definiu. O objetivo √© criar componentes reutiliz√°veis e bem separados, facilitando a manuten√ß√£o e a integra√ß√£o com o back-end posteriormente.

Como voc√™ vai usar o Gemini CLI para implementar, vou fornecer a estrutura de forma clara e passo a passo, explicando a responsabilidade de cada parte.

---

### **Passo 1: Estrutura de Pastas e Arquivos**

Vamos criar a seguinte estrutura, refletindo a arquitetura em camadas:

```plaintext
src/
‚îú‚îÄ‚îÄ app/
‚îÇ   ‚îú‚îÄ‚îÄ router/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ AppRouter.tsx          # Configura√ß√£o das rotas
‚îÇ   ‚îú‚îÄ‚îÄ store/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ authStore.ts           # Estado global de autentica√ß√£o (exemplo com Zustand)
‚îÇ   ‚îî‚îÄ‚îÄ providers/
‚îÇ       ‚îî‚îÄ‚îÄ AppProviders.tsx       # Providers de tema, roteamento, estado
‚îú‚îÄ‚îÄ ui/
‚îÇ   ‚îú‚îÄ‚îÄ components/
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ common/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Header.tsx         # Componente Header com usu√°rio e notifica√ß√µes
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Menu.tsx           # Componente Menu (Not√≠cias/Podcasts + Busca)
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ CarouselControls.tsx # Controles de carrossel (setas)
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ news/
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ NewsCard.tsx       # Card de not√≠cias
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ podcasts/
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ PodcastCard.tsx    # Card de podcasts
‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ReproductionCard.tsx # Card de reprodu√ß√£o de √°udio
‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ ReproductionMenu.tsx # Controles de reprodu√ß√£o (3 bot√µes)
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ forms/
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ LoginForm.tsx      # Formul√°rio de login
‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ RegisterForm.tsx   # Formul√°rio de cadastro
‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ EditUserForm.tsx   # Formul√°rio de edi√ß√£o de usu√°rio
‚îÇ   ‚îú‚îÄ‚îÄ layouts/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ MainLayout.tsx         # Layout base com Header e fundo gradient
‚îÇ   ‚îî‚îÄ‚îÄ pages/
‚îÇ       ‚îú‚îÄ‚îÄ HomePage.tsx           # P√°gina inicial (NewsCard)
‚îÇ       ‚îú‚îÄ‚îÄ PodcastsPage.tsx       # P√°gina de podcasts (PodcastCard)
‚îÇ       ‚îú‚îÄ‚îÄ PlayPodcastPage.tsx    # P√°gina de reprodu√ß√£o
‚îÇ       ‚îú‚îÄ‚îÄ LoginPage.tsx          # P√°gina de login
‚îÇ       ‚îú‚îÄ‚îÄ RegisterPage.tsx       # P√°gina de cadastro
‚îÇ       ‚îî‚îÄ‚îÄ EditUserPage.tsx       # P√°gina de edi√ß√£o de usu√°rio
‚îú‚îÄ‚îÄ services/
‚îÇ   ‚îú‚îÄ‚îÄ http/
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ apiClient.ts           # Configura√ß√£o do Axios
‚îÇ   ‚îî‚îÄ‚îÄ api/
‚îÇ       ‚îú‚îÄ‚îÄ authApi.ts             # Login, registro, logout
‚îÇ       ‚îú‚îÄ‚îÄ userApi.ts             # Buscar, editar usu√°rio
‚îÇ       ‚îú‚îÄ‚îÄ newsApi.ts             # Buscar not√≠cias
‚îÇ       ‚îî‚îÄ‚îÄ podcastsApi.ts         # Buscar podcasts
‚îú‚îÄ‚îÄ models/
‚îÇ   ‚îú‚îÄ‚îÄ user.ts                    # Interface User
‚îÇ   ‚îú‚îÄ‚îÄ news.ts                    # Interface News
‚îÇ   ‚îî‚îÄ‚îÄ podcast.ts                 # Interface Podcast
‚îú‚îÄ‚îÄ hooks/
‚îÇ   ‚îú‚îÄ‚îÄ useAuth.ts                 # Hook para autentica√ß√£o
‚îÇ   ‚îú‚îÄ‚îÄ useNews.ts                 # Hook para buscar not√≠cias
‚îÇ   ‚îî‚îÄ‚îÄ usePodcasts.ts             # Hook para buscar podcasts
‚îú‚îÄ‚îÄ utils/
‚îÇ   ‚îú‚îÄ‚îÄ constants.ts               # Cores, fontes, etc.
‚îÇ   ‚îî‚îÄ‚îÄ helpers.ts                 # formataData, etc.
‚îî‚îÄ‚îÄ assets/
    ‚îú‚îÄ‚îÄ styles/
    ‚îÇ   ‚îú‚îÄ‚îÄ globals.css            # Estilos globais e vari√°veis CSS
    ‚îÇ   ‚îî‚îÄ‚îÄ components.css         # Estilos espec√≠ficos dos componentes
    ‚îú‚îÄ‚îÄ images/
    ‚îÇ   ‚îú‚îÄ‚îÄ IconUser.png
    ‚îÇ   ‚îú‚îÄ‚îÄ IconBell.png
    ‚îÇ   ‚îî‚îÄ‚îÄ IconArrow.png
    ‚îî‚îÄ‚îÄ fonts/                     # (Se for usar fontes locais)
```

---

### **Passo 2: Defini√ß√£o de Tipos (models/)**

Vamos definir as interfaces principais em TypeScript.

**`src/models/user.ts`**
```typescript
export interface User {
  id: string;
  name: string;
  username: string;
  email: string;
}

export interface LoginFormData {
  username: string;
  password: string;
  rememberMe: boolean;
}

export interface RegisterFormData {
  name: string;
  username: string;
  email: string;
  password: string;
  confirmPassword: string;
  rememberMe: boolean;
}
```

**`src/models/news.ts`**
```typescript
export interface News {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  imageUrl: string;
  date: string;
}
```

**`src/models/podcast.ts`**
```typescript
export interface Podcast {
  id: string;
  title: string;
  subtitle: string;
  description: string;
  imageUrl: string;
  audioUrl: string;
  duration: string;
}
```

---

### **Passo 3: Configura√ß√£o Global (app/)**

**`src/app/store/authStore.ts`** (exemplo com Zustand)
```typescript
import { create } from 'zustand';
import { User } from '../../models/user';

interface AuthState {
  user: User | null;
  isLoggedIn: boolean;
  login: (user: User) => void;
  logout: () => void;
}

export const useAuthStore = create<AuthState>((set) => ({
  user: null,
  isLoggedIn: false,
  login: (user) => set({ user, isLoggedIn: true }),
  logout: () => set({ user: null, isLoggedIn: false }),
}));
```

**`src/app/router/AppRouter.tsx`**
```typescript
import { Routes, Route } from 'react-router-dom';
import { MainLayout } from '../../ui/layouts/MainLayout';
import { HomePage } from '../../ui/pages/HomePage';
import { PodcastsPage } from '../../ui/pages/PodcastsPage';
import { PlayPodcastPage } from '../../ui/pages/PlayPodcastPage';
import { LoginPage } from '../../ui/pages/LoginPage';
import { RegisterPage } from '../../ui/pages/RegisterPage';
import { EditUserPage } from '../../ui/pages/EditUserPage';

export function AppRouter() {
  return (
    <Routes>
      <Route path="/" element={<MainLayout />}>
        <Route index element={<HomePage />} />
        <Route path="podcasts" element={<PodcastsPage />} />
        <Route path="play-podcast/:id" element={<PlayPodcastPage />} />
        <Route path="login" element={<LoginPage />} />
        <Route path="register" element={<RegisterPage />} />
        <Route path="edit-user" element={<EditUserPage />} />
      </Route>
    </Routes>
  );
}
```

---

### **Passo 4: Componentes da UI (ui/components/)**

Vou mostrar exemplos de componentes cr√≠ticos para manter o estilo do PDF.

**`src/ui/components/common/Header.tsx`**
```typescript
import { useState } from 'react';
import { useAuthStore } from '../../../app/store/authStore';

export function Header() {
  const { user, isLoggedIn, logout } = useAuthStore();
  const [userDropdownOpen, setUserDropdownOpen] = useState(false);
  const [notificationsOpen, setNotificationsOpen] = useState(false);

  return (
    <header className="app-header">
      <div className="left">
        <div className="user-wrap">
          <button className="icon-btn" onClick={() => setUserDropdownOpen(!userDropdownOpen)}>
            <img src="/assets/images/IconUser.png" alt="Usu√°rio" />
          </button>
          {userDropdownOpen && (
            <div className="dropdown user-dropdown">
              {isLoggedIn ? (
                <>
                  <a href="/edit-user">Configura√ß√µes</a>
                  <button onClick={logout}>Logoff</button>
                </>
              ) : (
                <a href="/login">Acessar</a>
              )}
            </div>
          )}
        </div>
      </div>
      <div className="notifications">
        <button className="icon-btn" onClick={() => setNotificationsOpen(!notificationsOpen)}>
          <img src="/assets/images/IconBell.png" alt="Notifica√ß√µes" />
        </button>
        {notificationsOpen && (
          <div className="dropdown">
            <div>Notifica√ß√µes</div>
            {/* Lista de notifica√ß√µes */}
          </div>
        )}
      </div>
    </header>
  );
}
```

**`src/ui/components/common/Menu.tsx`**
```typescript
import { useLocation } from 'react-router-dom';

export function Menu() {
  const location = useLocation();

  return (
    <div className="menu-row">
      <a
        href="/"
        className={`pill ${location.pathname === '/' ? 'selected' : 'unselected'}`}
      >
        Not√≠cias
      </a>
      <a
        href="/podcasts"
        className={`pill ${location.pathname === '/podcasts' ? 'selected' : 'unselected'}`}
      >
        Podcasts
      </a>
      <div className="search">
        <button>‚ò∞</button>
        <input placeholder="Hinted search text" />
        <button>üîç</button>
      </div>
    </div>
  );
}
```

**`src/ui/components/podcasts/PodcastCard.tsx`**
```typescript
import { Podcast } from '../../../models/podcast';

interface PodcastCardProps {
  podcast: Podcast;
}

export function PodcastCard({ podcast }: PodcastCardProps) {
  return (
    <article className="card">
      <div className="card-media">
        <img src={podcast.imageUrl} alt={podcast.title} />
      </div>
      <div className="card-body">
        <div className="card-header">
          <div>
            <div className="card-title">{podcast.title}</div>
            <div className="card-sub">{podcast.subtitle}</div>
          </div>
          <div>‚ãÆ</div>
        </div>
        <p className="card-desc">{podcast.description}</p>
        <a href={`/play-podcast/${podcast.id}`} className="play-pill">Ouvir</a>
      </div>
    </article>
  );
}
```

---

### **Passo 5: P√°ginas (ui/pages/)**

**`src/ui/pages/HomePage.tsx`**
```typescript
import { useNews } from '../../hooks/useNews';
import { NewsCard } from '../components/news/NewsCard';
import { useAuthStore } from '../../app/store/authStore';

export function HomePage() {
  const { user } = useAuthStore();
  const { news, loading } = useNews();

  return (
    <section className="screen">
      <h1 className="hero-title">
        Ol√° <span className="username">{user?.name || 'Fulano'}</span>, seja bem-vindo de volta!<br />
        Confira nossas √∫ltimas not√≠cias e PodCasts!
      </h1>
      <Menu />
      <div className="cards-row">
        {news.slice(0, 2).map((item) => (
          <NewsCard key={item.id} news={item} />
        ))}
      </div>
      <CarouselControls />
    </section>
  );
}
```

---

### **Passo 6: Servi√ßos (services/)**

**`src/services/http/apiClient.ts`**
```typescript
import axios from 'axios';

export const apiClient = axios.create({
  baseURL: process.env.REACT_APP_API_URL,
  headers: { 'Content-Type': 'application/json' },
});
```

**`src/services/api/newsApi.ts`**
```typescript
import { apiClient } from '../http/apiClient';
import { News } from '../../models/news';

export const newsApi = {
  getNews: async (): Promise<News[]> => {
    const response = await apiClient.get<News[]>('/news');
    return response.data;
  },
};
```

---

### **Passo 7: Estilos (assets/styles/)**

**`src/assets/styles/globals.css`**
```css
:root {
  --olive: #555C34;
  --purple: #6750A4;
  --white: #FFFFFF;
  --bg-left: #c8d891;
  --bg-right: #f6eef1;
  --card-bg: #ffffff;
  --text-dark: #222;
}

body {
  background: linear-gradient(180deg, var(--bg-left) 0 32%, var(--bg-right) 32% 100%);
  font-family: 'Roboto', sans-serif;
}

.hero-title {
  font-family: 'Abhaya Libre', serif;
  font-weight: 800;
  color: var(--white);
}

.hero-title .username {
  color: var(--olive);
}

.pill.selected {
  background: var(--olive);
  color: var(--white);
}

.pill.unselected {
  background: var(--white);
  color: var(--olive);
}
```

---

### **Passo 8: Hook Customizado (hooks/)**

**`src/hooks/useNews.ts`**
```typescript
import { useState, useEffect } from 'react';
import { newsApi } from '../services/api/newsApi';
import { News } from '../models/news';

export function useNews() {
  const [news, setNews] = useState<News[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchNews = async () => {
      try {
        const data = await newsApi.getNews();
        setNews(data);
      } catch (error) {
        console.error('Erro ao buscar not√≠cias:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchNews();
  }, []);

  return { news, loading };
}
```

---

### **Resumo para o Gemini CLI:**

1.  **Crie a estrutura de pastas** como definida acima.
2.  **Implemente os modelos (models/)** com as interfaces TypeScript.
3.  **Configure o store global (app/store/)** para gerenciar o estado de autentica√ß√£o.
4.  **Crie os servi√ßos (services/)** para comunica√ß√£o com a API.
5.  **Desenvolva os componentes UI (ui/components/)** de forma modular, reutilizando estilos.
6.  **Monte as p√°ginas (ui/pages/)** combinando os componentes.
7.  **Configure o roteamento (app/router/)** para navega√ß√£o.
8.  **Aplique os estilos CSS** mantendo a identidade visual do PDF.

Cada componente deve ser independente, recebendo dados via props ou hooks. Os servi√ßos abstraem a l√≥gica de API, e o store gerencia o estado global (como o usu√°rio logado).
Quer que eu detalhe mais algum componente espec√≠fico ou a parte de roteamento?
